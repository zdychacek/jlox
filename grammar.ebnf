<program>            ::= <declaration>*
<declaration>        ::= <classDecl> | <varDecl> | <funDecl> | <statement>
<varDecl>            ::= "var" " " <IDENTIFIER> ( "=" <expression> )? ";"
<classDecl>          ::= "class" " " <IDENTIFIER> ("<" <IDENTIFIER>)? "{" <function>* "}"
<funDecl>            ::= "fun" " " <function>
<statement>          ::= <exprStmt>
                       | <forStmt>
                       | <ifStmt>
                       | <breakStmt>
                       | <continueStmt>
                       | <returnStmt>
                       | <whileStmt>
                       | <block>

<exprStmt>           ::= <expression> ";"
<forStmt>            ::= "for" "(" (<varDecl> | <exprStmt> | ";") <expression>? ";" <expression>? ")" <statement>
<ifStmt>             ::= "if" "(" <expression> ")" <statement> ( "else" <statement> )?
<breakStmt>          ::= "break" ";"
<continueStmt>       ::= "continue" ";"
<returnStmt>         ::= "return" <expression>? ";"
<whileStmt>          ::= "while" "(" <expression> ")" <statement>
<block>              ::= "{" <declaration>* "}"
<expression>         ::= <assignment>
<assignment>         ::= (<call> ".")? <IDENTIFIER> "=" <assignment> | <logic_or>
<logic_or>           ::= <logic_and> ( "or" <logic_and> )*
<logic_and>          ::= <equality> ( "and" <equality> )*
<equality>           ::= <comparison> ( ( "!=" | "==" ) <comparison> )*
<comparison>         ::= <addition> ( ( ">" | ">=" | "<" | "<=" ) <addition> )*
<addition>           ::= <multiplication> ( ( "-" | "+" ) <multiplication> )*
<multiplication>     ::= <unary> ( ( "/" | "*" ) <unary> )*
<unary>              ::= ( "!" | "-" ) <unary> | <call>
<call>               ::= <primary> ( "(" <arguments>? ")" | "." <IDENTIFIER> )*
<primary>            ::= "true"
                       | "false"
                       | "nil"
                       | "this"
                       | <NUMBER>
                       | <STRING>
                       | <IDENTIFIER>
                       | "(" <expression> ")"
                       | "super" "." <IDENTIFIER>

<function>           ::= <IDENTIFIER> "(" <parameters>? ")" <block>
<parameters>         ::= <IDENTIFIER> ( "," <IDENTIFIER> )*
<arguments>          ::= <expression> ( "," <expression> )*

<NUMBER>             ::= <DIGIT>+ ( "." <DIGIT>+ )?
<STRING>             ::= "'" <ALPHA>* "'"
<IDENTIFIER>         ::= <ALPHA> ( <ALPHA> | <DIGIT> )*
<DIGIT>              ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<ALPHA>              ::= "A" | "B" | "C" | "D" | "E" | "F" | "G"
                       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
                       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
                       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
                       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
                       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
                       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
                       | "x" | "y" | "z" | "_"
